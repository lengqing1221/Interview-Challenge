[{"/Users/danielxu1221/Downloads/ramp-fe-challenge/src/index.tsx":"1","/Users/danielxu1221/Downloads/ramp-fe-challenge/src/App.tsx":"2","/Users/danielxu1221/Downloads/ramp-fe-challenge/src/components/AppContextProvider/index.tsx":"3","/Users/danielxu1221/Downloads/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts":"4","/Users/danielxu1221/Downloads/ramp-fe-challenge/src/components/Instructions.tsx":"5","/Users/danielxu1221/Downloads/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts":"6","/Users/danielxu1221/Downloads/ramp-fe-challenge/src/hooks/useEmployees.ts":"7","/Users/danielxu1221/Downloads/ramp-fe-challenge/src/utils/constants.ts":"8","/Users/danielxu1221/Downloads/ramp-fe-challenge/src/components/InputSelect/index.tsx":"9","/Users/danielxu1221/Downloads/ramp-fe-challenge/src/components/Transactions/index.tsx":"10","/Users/danielxu1221/Downloads/ramp-fe-challenge/src/utils/context.ts":"11","/Users/danielxu1221/Downloads/ramp-fe-challenge/src/hooks/useCustomFetch.ts":"12","/Users/danielxu1221/Downloads/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx":"13","/Users/danielxu1221/Downloads/ramp-fe-challenge/src/hooks/useWrappedRequest.ts":"14","/Users/danielxu1221/Downloads/ramp-fe-challenge/src/utils/fetch.ts":"15","/Users/danielxu1221/Downloads/ramp-fe-challenge/src/utils/requests.ts":"16","/Users/danielxu1221/Downloads/ramp-fe-challenge/src/components/InputCheckbox/index.tsx":"17"},{"size":314,"mtime":1726539091000,"results":"18","hashOfConfig":"19"},{"size":5845,"mtime":1734771166707,"results":"20","hashOfConfig":"19"},{"size":675,"mtime":1726539091000,"results":"21","hashOfConfig":"19"},{"size":1419,"mtime":1734771193534,"results":"22","hashOfConfig":"19"},{"size":593,"mtime":1726539091000,"results":"23","hashOfConfig":"19"},{"size":930,"mtime":1726539091000,"results":"24","hashOfConfig":"19"},{"size":672,"mtime":1726539091000,"results":"25","hashOfConfig":"19"},{"size":135,"mtime":1726539091000,"results":"26","hashOfConfig":"19"},{"size":3729,"mtime":1726539091000,"results":"27","hashOfConfig":"19"},{"size":1154,"mtime":1726539091000,"results":"28","hashOfConfig":"19"},{"size":238,"mtime":1726539091000,"results":"29","hashOfConfig":"19"},{"size":2201,"mtime":1734760784907,"results":"30","hashOfConfig":"19"},{"size":1314,"mtime":1734771500809,"results":"31","hashOfConfig":"19"},{"size":668,"mtime":1734771193535,"results":"32","hashOfConfig":"19"},{"size":3115,"mtime":1726539091000,"results":"33","hashOfConfig":"19"},{"size":1557,"mtime":1726539091000,"results":"34","hashOfConfig":"19"},{"size":831,"mtime":1734768275311,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bidtlk",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/danielxu1221/Downloads/ramp-fe-challenge/src/index.tsx",[],[],"/Users/danielxu1221/Downloads/ramp-fe-challenge/src/App.tsx",["88"],[],"import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from './utils/types';\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  // storing the declined transactions if removed by accident\n  const [declinedTransactions, setDeclinedTransactions] = useState<Transaction[]>([])\n\n  // storing the accepted transactions into a separate array\n\n  const [localTransactions, setLocalTransactions] = useState<Transaction[]>([])\n  const [approvedTransactions, setApprovedTransactions] = useState<Transaction[]>([])\n\n\n  const [isLoading, setIsLoading] = useState(false)\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  useEffect(() => {\n    if (transactions) {\n      setLocalTransactions(transactions)\n    }\n  }, [transactions])\n\n  const handleApproveTransaction = (transactionId: string) => {\n    setLocalTransactions((prev) => {\n      // Find the transaction in local\n      const found = prev.find((t) => t.id === transactionId)\n      if (found) {\n        // Add a copy to approvedTransactions\n        setApprovedTransactions((oldApproved) => [\n          ...oldApproved,\n          { ...found, approved: true },\n        ])\n      }\n      // Remove it from local\n      return prev.filter((t) => t.id !== transactionId)\n    })\n  }\n\n\n  // declined transactions\n  const handleDeclineTransaction = (transactionId: string) => {\n    setLocalTransactions((prev) => {\n      const found = prev.find((t) => t.id === transactionId)\n      if (found) {\n        setDeclinedTransactions((oldDeclined) => [...oldDeclined, found])\n      }\n      // Return the new local list without the declined item\n      return prev.filter((t) => t.id !== transactionId)\n    })\n  }\n\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            console.log('Selected Value:', newValue);\n            if (newValue?.id === EMPTY_EMPLOYEE.id) {\n              // reset the list of transactions\n              await loadAllTransactions()\n              return\n            } else if (!newValue) {\n              return\n            }\n            await loadTransactionsByEmployee(newValue?.id)\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={localTransactions} />\n\n          {localTransactions !== null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading || paginatedTransactions?.nextPage == null || transactionsByEmployee?.length === 0}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n          <button className=\"RampButton\" onClick={() => {\n            if (localTransactions.length > 0) {\n              handleApproveTransaction(localTransactions[0].id)\n            }\n          }}>\n            Approve First\n          </button>\n\n          <button className=\"RampButton\" onClick={() => {\n            if (localTransactions.length > 0) {\n              handleDeclineTransaction(localTransactions[0].id)\n            }\n          }}>\n            Decline First\n          </button>\n        </div>\n        <div className=\"approved_transactions w-full Ramp-Gri\">\n          <Transactions transactions={approvedTransactions} />\n\n          {approvedTransactions !== null && (\n            <button\n              className=\"RampButton w-full relative\"\n              disabled={paginatedTransactionsUtils.loading || paginatedTransactions?.nextPage == null || transactionsByEmployee?.length === 0}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n","/Users/danielxu1221/Downloads/ramp-fe-challenge/src/components/AppContextProvider/index.tsx",[],[],"/Users/danielxu1221/Downloads/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts",[],[],"/Users/danielxu1221/Downloads/ramp-fe-challenge/src/components/Instructions.tsx",[],[],"/Users/danielxu1221/Downloads/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts",[],[],"/Users/danielxu1221/Downloads/ramp-fe-challenge/src/hooks/useEmployees.ts",[],[],"/Users/danielxu1221/Downloads/ramp-fe-challenge/src/utils/constants.ts",[],[],"/Users/danielxu1221/Downloads/ramp-fe-challenge/src/components/InputSelect/index.tsx",[],[],"/Users/danielxu1221/Downloads/ramp-fe-challenge/src/components/Transactions/index.tsx",[],[],"/Users/danielxu1221/Downloads/ramp-fe-challenge/src/utils/context.ts",[],[],"/Users/danielxu1221/Downloads/ramp-fe-challenge/src/hooks/useCustomFetch.ts",[],[],"/Users/danielxu1221/Downloads/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx",[],[],"/Users/danielxu1221/Downloads/ramp-fe-challenge/src/hooks/useWrappedRequest.ts",[],[],"/Users/danielxu1221/Downloads/ramp-fe-challenge/src/utils/fetch.ts",[],[],"/Users/danielxu1221/Downloads/ramp-fe-challenge/src/utils/requests.ts",[],[],"/Users/danielxu1221/Downloads/ramp-fe-challenge/src/components/InputCheckbox/index.tsx",[],[],{"ruleId":"89","severity":1,"message":"90","line":16,"column":10,"nodeType":"91","messageId":"92","endLine":16,"endColumn":30},"@typescript-eslint/no-unused-vars","'declinedTransactions' is assigned a value but never used.","Identifier","unusedVar"]